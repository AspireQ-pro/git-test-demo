from flask import Flask, render_template, request, redirect, url_for
from transformers import T5ForConditionalGeneration, T5Tokenizer
import torch
from googletrans import Translator
from docx import Document
import PyPDF2
import os
from datetime import datetime
import uuid

app = Flask(__name__)

# Load T5 model and tokenizer
model_name = "t5-small"
model = T5ForConditionalGeneration.from_pretrained(model_name)
tokenizer = T5Tokenizer.from_pretrained(model_name)

translator = Translator()

# In-memory storage
summaries = []

# Summarization
def summarize_text(text):
    inputs = tokenizer.encode("summarize: " + text, return_tensors="pt", max_length=512, truncation=True)
    summary_ids = model.generate(inputs, max_length=150, min_length=40, length_penalty=2.0, num_beams=4, early_stopping=True)
    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
    return summary

# PDF extraction
def extract_text_from_pdf(file):
    file.seek(0)
    pdf_reader = PyPDF2.PdfReader(file)
    text = ''
    for page in pdf_reader.pages:
        text += page.extract_text() or ''
    return text

# DOCX extraction
def extract_text_from_docx(file):
    doc = Document(file)
    return '\n'.join([para.text for para in doc.paragraphs])

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload():
    file = request.files['file']
    if not file:
        return "No file uploaded."

    if file.filename.endswith('.txt'):
        text = file.read().decode('utf-8')
    elif file.filename.endswith('.pdf'):
        text = extract_text_from_pdf(file)
    elif file.filename.endswith('.docx'):
        text = extract_text_from_docx(file)
    else:
        return "Unsupported file type."

    summary = summarize_text(text)
    summaries.append((
        str(uuid.uuid4()),
        file.filename,
        summary,
        datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ))

    return render_template('index.html', summary=summary)

@app.route('/translate', methods=['POST'])
def translate():
    language = request.form['language']
    summary = request.form['summary']
    translated = translator.translate(summary, dest=language).text
    return render_template('index.html', summary=summary, translated_text=translated)




@app.route('/download/<id>')
def download_summary(id):
    for summary in summaries:
        if summary[0] == id:
            filename = f"{summary[1]}_summary.txt"
            return (
                summary[2],
                200,
                {
                    'Content-Type': 'text/plain; charset=utf-8',
                    'Content-Disposition': f'attachment; filename="{filename}"'
                }
            )
    return "Summary not found", 404

@app.route('/delete_summary/<id>', methods=['POST'])
def delete_summary(id):
    global summaries
    summaries = [s for s in summaries if s[0] != id]
    return redirect(url_for('show_summaries'))

if __name__ == '__main__':
    app.run(debug=True)
